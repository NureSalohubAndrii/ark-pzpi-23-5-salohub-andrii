МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИКАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇЗвітз практичної роботи № 1 з дисципліниАналіз та рефакторинг кодуВиконала:                                                                         Перевірив:ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІСалогуб Андрій 						          Сокорчук Ігор ПетровичХарків 2025
1 МЕТА РОБОТИ     Сформувати розуміння важливості дотримання правил оформлення програмного коду та вивчити основні рекомендації написання коду для обраної мови програмування. Навчитися застосовувати принципи code convention з метою підвищення читабельності, структурованості та зрозумілості програмного забезпечення. 
2 ОПИС ВИКОНАНОЇ РОБОТИ     У рамках цієї доповіді в якості мови програмування було обрано JavaScript. Це одна з найпопулярніших мов, яка використовується як на стороні клієнта, так і на стороні сервера, та є невід’ємною складовою сучасної веб-розробки. Її широке застосування зумовлює необхідність дотримання єдиних правил оформлення коду, що дозволяє підтримувати високу якість програмного забезпечення та спрощує співпрацю між розробниками.     Подальші рекомендації та приклади code convention у цій роботі будуть розглядатися саме в контексті JavaScript, із врахуванням його специфічних особливостей та поширених підходів у професійній практиці.     Перш ніж перейти безпосередньо до розгляду конкретних правил оформлення коду, важливо зрозуміти, навіщо вони взагалі потрібні і яку користь приносять. Код пишеться не лише для комп’ютера, який виконує його інструкції, а насамперед для людей, які його створюють, читають і підтримують. Саме тому існують code convention – набір домовленостей, що дозволяє зробити програмний код більш зрозумілим, логічно структурованим і легким для сприйняття.     Дотримання правил оформлення коду відіграє ключову роль у командній розробці програмного забезпечення. Вони забезпечують єдиний стиль, зменшують кількість синтаксичних і логічних помилок, а також сприяють ефективній комунікації між розробниками. Завдяки стандартизації коду набагато легше підтримувати та розширювати проєкти, а нові учасники команди швидше адаптуються до вже існуючої бази.     Основні переваги дотримання стилю кодування можна сформулювати так:- Читабельність – код легко зрозуміти навіть тим, хто бачить його вперше.- Підтримуваність – простіше знаходити й виправляти помилки, оновлювати та розширювати функціонал.- Мінімізація помилок – чіткі стандарти знижують ризик плутанини та помилок у логіці програми.- Прискорення розробки – менше часу витрачається на пояснення і розуміння чужого коду.     У прикладі (рядки 1-7), який також наведений на відповідному слайді, який наведено в додатку Б.2 показана різниця між хаотичним та структурованим підходом. 1  // Погано написаний код2  var x =function(){console.log('Hello, user!')};34  // Добре написаний код5  const greetUser = () => {6    console.log('Hello, user!');7  };     У другому варіанті використовується (рядки 4-7) осмислена назва функції, сучасний синтаксис та правильне форматування. Завдяки цьому код стає зрозумілішим, легшим для повторного використання і підтримки.     Після того як ми з’ясували, навіщо взагалі потрібні правила оформлення коду, варто розглянути конкретні підходи, які використовуються на практиці. У світі JavaScript існує кілька поширених конвенцій стилю кодування (таблиця з їх порівнянням наведена в додатку Б.3), що встановлюють стандарти форматування, іменування та організації коду. Їхнє дотримання допомагає створювати єдиний стиль у проєкті, уникати плутанини та спрощувати співпрацю між розробниками.     Однією з найвідоміших є Airbnb JavaScript Style Guide. Це найпопулярніша й одна з найдетальніших конвенцій, яка широко застосовується в комерційних проєктах. Вона вимагає обов’язкового використання крапок з комою, одинарних лапок, відступів у два пробіли та "trailing commas" (ком у кінці багаторядкових структур). Також особливу увагу приділено використанню сучасних конструкцій const та let замість застарілого var.     Інший підхід представляє Google JavaScript Style Guide. Це корпоративна конвенція, що робить акцент не лише на форматуванні коду, а й на його документації. Тут передбачене використання крапок з комою, одинарних лапок і відступів у два пробіли, але ключовою відмінністю є суворі правила щодо JSDoc-коментарів. "Trailing commas" у цьому випадку є опціональними.     Більш мінімалістичний варіант пропонує StandardJS, який відомий як "стандарт без конфігурації". Основна ідея полягає у спрощенні: відсутні крапки з комою, але використовуються одинарні лапки, відступи у два пробіли та camelCase для іменування. Крім того, обов’язковим є додавання пробілів після ключових слів, що робить код більш охайним і легким для сприйняття.     Таким чином, хоча різні конвенції мають певні відмінності, їхня спільна мета – зробити код передбачуваним, зрозумілим і зручним у підтримці. Для конкретного проєкту важливо обрати одну конвенцію і дотримуватися її, адже змішування стилів у командній роботі створює зайві труднощі й знижує ефективність співпраці.     З наведених конвенцій можна виділити основні поради щодо форматування коду:- Використовувати 2 пробіли для відступів, оскільки це найпоширеніший стандарт у JavaScript-проєктах.- Обмежувати довжину рядка 80–100 символами, щоб код легко читався навіть на екранах із меншою роздільною здатністю.- Дотримуватися єдиного стилю розташування дужок. Найчастіше застосовується стиль K&R (Kernighan & Ritchie), де відкрита фігурна дужка { ставиться в кінці рядка з умовою чи оголошенням.- Використовувати один тип лапок для рядків (зазвичай одинарні '...') і дотримуватися його у всьому проєкті.- Налаштовувати редактор коду або інструменти автоматичного форматування (наприклад, Prettier, ESLint) для забезпечення однакового стилю незалежно від розробника.     На прикладі коду (рядки 1-6) також наведеному на слайді в додатку Б.4 показано приклад стилю K&R, що є класичним і найбільш поширеним у JavaScript. 1  // K&R (Kernighan & Ritchie)2  if (isLoggedIn) {3    showDashboard();4  } else {5    showLogin();6  }          Навіть якщо в команді визначені чіткі правила стилю та форматування, розробники можуть випадково їх порушувати. Щоб уникнути таких ситуацій і зберігати єдиний стиль у проекті, використовуються спеціальні інструменти автоматичної перевірки та форматування коду (інформація про них також наведена в додатку Б.5). Вони допомагають виявляти помилки ще до запуску програми та зменшують кількість ручної роботи.     ESLint – це інструмент для аналізу JavaScript-коду, який дозволяє знаходити помилки та виявляти порушення правил стилю. Він підтримує налаштування власних правил або використання готових наборів, наприклад Airbnb чи StandardJS. Особливістю ESLint є можливість інтеграції з Prettier, де ESLint відповідає за перевірку логіки й потенційних багів, а Prettier – за чисте форматування.     Prettier – це автоматичний форматер коду, що застосовує визначені правила форматування, такі як відступи, лапки, розташування дужок і пробіли. Prettier можна інтегрувати безпосередньо у редактор коду або налаштувати його запуск перед кожним комітом. Це дозволяє підтримувати консистентність стилю коду у всій команді незалежно від індивідуальних звичок розробників.     Використання ESLint та Prettier разом дає змогу забезпечити високу якість коду: з одного боку, мінімізувати логічні помилки, а з іншого – гарантувати єдиний стиль написання, що робить проект зрозумілішим і легшим у підтримці.     Після ознайомлення з правилами стилю, форматування та інструментами перевірки, важливо розглянути структуру коду, яка визначає логічну організацію проекту. Добре спланована структура робить код передбачуваним, зрозумілим і легким для підтримки.     Проект повинен мати чітку ієрархію директорій, наприклад як наведено на слайді в додатку Б.6.     Кожен файл бажано присвячувати одному логічному блоку коду, щоб його було легше читати та підтримувати. Імена файлів можуть бути у camelCase, PascalCase або kebab-case, залежно від прийнятої конвенції в проєкті.     Модулі дозволяють групувати пов’язані функції та експортувати лише необхідний функціонал, що спрощує повторне використання коду та зменшує дублювання. Класи об’єднують методи та властивості, які відносяться до одного об’єкта або концепції, забезпечуючи можливість створення повторно використовуваних структур даних.     Завдяки такій організації коду команда розробників швидше розуміє логіку проєкту, легше вносить зміни та підтримує код у чистоті. Структура коду стає основою для масштабування та розвитку проєкту без хаосу в файлах і функціях.     Після того як ми розглянули правила стилю, форматування та організацію коду, важливо звернути увагу на коментарі (інформація про них також наведена на слайді в додатку Б.7). Вони допомагають зробити код більш зрозумілим для інших розробників і полегшують підтримку проекту. При цьому головна мета коментарів – пояснити “чому” код робить те, що робить, а не “що” він робить. Код сам по собі повинен бути максимально зрозумілим, а коментарі додають цінність лише тоді, коли пояснюють складну логіку або нестандартні рішення.     Приклад поганого використання коментарів (рядки 1-15), в цьому варінті коду коментарі є надмірними та майже повністю дублюють те, що видно з самого коду. Вони описують очевидні дії, такі як перевірка на порожнє значення чи створення регулярного виразу, не додаючи жодної корисної інформації. Це засмічує код і робить його важчим для швидкого читання, а також підвищує ризик того, що коментарі стануть некоректними після змін у логіці.     У другому варіанті (рядки 17-25) коментарі використані лише там, де вони справді пояснюють суттєву деталь або контекст, наприклад, уточнюють, який формат email вважається правильним. Вони не повторюють очевидне, а допомагають зрозуміти логіку перевірки та мотивацію певного підходу. Завдяки цьому код залишається чистим і легко читається, а коментарі додають справжню цінність, пояснюючи “чому” саме так реалізовано перевірку. Також відповідний код наведений в додатку Б.8.1  // Функція для валідації email2  function validateEmail(email) {3    // Перевіряємо чи email не порожній4    if (!email) {5      // Повертаємо false якщо порожній6      return false;7    }9    // Створюємо регулярний вираз для перевірки email10   const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;12   // Тестуємо email за допомогою regex13   // Повертаємо результат тесту14   return regex.test(email);15 }17 function validateEmail(email) {18   if (!email) return false;20   // Перевіряємо формат: smth@smth.smth21   // (без пробілів, з одним @)22   const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;24   return regex.test(email);25 }          Після розгляду правил коментування важливо звернути увагу на найменування змінних, адже зрозумілі та послідовні імена значно підвищують читабельність коду та спрощують підтримку проекту. У JavaScript для змінних зазвичай використовується camelCase рядки (рядки 6-11), а для констант – UPPER_CASE (рядки 13-5) із підкресленнями. Відповідна інформація також наведена на слайді в додатку Б.9.     Гарні назви змінних мають бути:- Описовими – назва має пояснювати, що зберігає змінна.- Зрозумілими без контексту – її призначення має бути очевидним навіть при першому погляді.- Послідовними – дотримуйтесь єдиних конвенцій у всьому проєкті.	Назви, які відповідають принципам зрозумілості та описовості, вважаються гарними, бо вони дозволяють будь-якому розробнику миттєво зрозуміти, що саме зберігає змінна, без додаткового аналізу коду або звернення до документації. Такі назви зменшують плутанину, підвищують читабельність і спрощують підтримку проєкту, а послідовність і описовість дозволяють легко передавати код між членами команди та забезпечують однорідний стиль у всьому проєкті. У наведеному прикладі це наочно показано: перші варіанти назв (рядки 1-4), такі як d, a1 та obj, взагалі не пояснюють, що зберігають змінні, і без контексту їх сенс зрозуміти дуже важко. Натомість наступні варіанти (рядки 7-11), такі як currentDate та userProfile, одразу дають чітке розуміння того, що саме зберігає змінна, і полегшують сприйняття та роботу з кодом.1  // Погані та незрозумілі назви2  let d = new Date();3  let a1 = 'Andrii';4  const obj = { n: 'Andrii', a: 18 };6  // Гарні назви7  let currentDate = new Date();8  const userProfile = {9    name: 'Andrii',10   age: 18,11 };13 // Константи14 const API_URL = '.....';15 const TOKEN_EXPIRE_TIME = '30m';          Після того, як ми розглянули правила найменування змінних, важливо звернути увагу на найменування функцій, адже правильні назви допомагають одразу зрозуміти, яку дію виконує код.     Функції виконують дії, тому їхні назви мають бути дієсловами або фразами, що описують дію. Наприклад, поганий приклад – calc, бо з назви не зрозуміло, що саме обчислює функція: додавання, множення, обчислення податків? У JavaScript для назв функцій зазвичай використовується camelCase.     Як і зазначено на слайді в додатку Б.10 гарні назви функцій:- Починаються з дієслова: calculate, validate, process, fetch.- Точно описують, що робить функція, без необхідності заглядати всередину коду.- Для функцій, що повертають boolean, використовують префікси is, has, can: isUserAdult, hasPermission, canEdit.     Такі назви функцій вважаються гарними, бо вони одразу повідомляють розробнику, яку дію виконує функція, що підвищує читабельність коду, спрощує розуміння логіки та зменшує ризик неправильного використання. Використання дієслів і точних описів робить код самодокументованим, а префікси для функцій, що повертають булеве значення, допомагають швидко зрозуміти тип результату і його значення. Наприклад, функції fetchUsers, validateDto та calculateTotalIncome (рядки 1-3) одразу пояснюють, що роблять: перша отримує користувачів, друга перевіряє дані, а третя обчислює загальний дохід. Функції з префіксами has і is, такі як hasPermission, hasError і isModalOpen (рядки 5-7), чітко вказують на булевий результат і дозволяють швидко зрозуміти, чи є певний стан чи право. Таким чином, використання зрозумілих і точних назв підвищує передбачуваність коду, зменшує помилки та робить його більш читабельним і легким для підтримки.1  function fetchUsers() {}2  function validateDto() {}3  function calculateTotalIncome() {}5  function hasPermission(role) {}6  function hasError() {}7  function isModalOpen() {}     Раніше зазначалось що у JavaScript назви функцій зазвичай пишуться у camelCase, проте існує важливий виняток – це функції конструктори (рядки 1-8).     Їхні назви, як і назви класів (рядки 10-19) зазвичай починаються з великих літер і є іменниками (як і в прикладах наведених на слайді в додатку Б.11), що відображає сутність об’єкта або класу, який вони представляють. Для таких назв використовується стиль PascalCase. Це допомагає легко відрізнити конструктори та класи від звичайних функцій у коді.     Назви конструкторів і класів у PascalCase вважаються гарними, бо одразу сигналізують розробнику, що це шаблон для створення об’єктів, а не звичайна функція. Іменники відображають, яку сутність представляє клас або об’єкт, що підвищує зрозумілість коду та робить його більш передбачуваним і структурованим.1  function User(name, age) {2    this.name = name;3    this.age = age;5    this.getInfo = function () {6      return `Name: ${this.name} and age: ${this.age}`;7    };8  }10 class Dog {11   constructor(name, breed) {12     this.name = name;13     this.breed = breed;14   }16   bark() {17     return `${this.name} says Woof!`;18   }19 }     Використання сучасних можливостей JavaScript дозволяє писати код більш зрозумілим, надійним і підтримуваним. Вони спрощують роботу з проектом, роблять код чистішим та ефективнішим для розвитку.     Основні приклади сучасних можливостей (їх код наведений на слайді в додатку Б.12):- let/const замість var (рядки 1-2) – дозволяє чітко визначати область видимості змінних і уникати небажаних перезаписів.- Деструктуризація (рядки 6-10) – дозволяє швидко витягувати потрібні властивості з об’єктів або масивів.- Шаблонні рядки (рядок 4) – спрощують роботу з рядками, дозволяють вставляти змінні та вирази без складного конкатенування.1  let currentDate = new Date();2  const API_URL = '.....';4  const greeting = `Привіт, ${name}!`;6  const userProfile = {7    name: 'Andrii',8    age: 18,9  };10 const { name, age } = userProfile;     Використання цих можливостей робить код чіткішим, передбачуваним і менш схильним до помилок, а також спрощує його підтримку та розширення в командних проєктах.
     ВИСНОВКИ     Якісний код JavaScript - це набагато більше, ніж просто працююча програма. Цеінвестиція в майбутнє проекту та команди.     Послідовність у стилі написання коду створює спільну мову між розробниками,робить код зрозумілішим і зручнішим у підтримці. Добре структурований, читабельний код із чіткими назвами змінних і функцій тадоречними коментарями перетворюється на зрозумілий документ, яку легко продовжити будь-кому з команди. Код, написаний із турботою про тих, хто працюватиме з ним далі, завжди легше змінювати та розвивати.     Інвестуючи час в якість коду сьогодні, розробник отримуємо стабільність, менше помилок і більшу ефективність у майбутньому.
ДОДАТОК АВідеозаписВідеозапис презентації результатів лабораторної роботи:https://youtu.be/gKt3W5gF35wХронологічний опис відеозапису:00:00 - Вступне представлення00:09 - Інформація щодо теми доповіді00:20 - Важливість правил оформлення коду02:01 - Конвенції стилю кодування03:44 - Форматування коду04:57 - Інструменти перевірки стилю та підтримки якості коду06:25 - Структура коду07:58 - Коментарі08:51 - Приклад гарного і поганого використання коду09:36 - Найменування змінних11:18 - Найменування функцій12:31 - Найменування функцій конструкторів та класів13:17 - Використання сучасних можливостей14:10 - Висновки15:04 - Використані джерела
ДОДАТОК БГрафічні матеріалиРисунок Б.1 — Титульний слайдРисунок Б.2 — Важливість правил оформлення кодуРисунок Б.3 — Конвенції стилю кодуванняРисунок Б.4 — Форматування кодуРисунок Б.5 — Інструменти перевірки стилю та підтримки якості кодуРисунок .6 — Структура кодуРисунок Б.7 — КоментаріРисунок Б.8 — Приклад гарного і поганого використання коментарівРисунок Б.9 — Найменування зміннихРисунок Б.10 — Найменування функційРисунок Б.11 — Найменування функцій конструкторів та класівРисунок Б.12 — Використання сучасних можливостейРисунок Б.13 — ВисновкиРисунок Б.14 — Використані джерела1